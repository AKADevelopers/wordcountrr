{
  "version": 3,
  "sources": ["../../diff/lib/index.mjs"],
  "sourcesContent": ["function Diff() {}\r\nDiff.prototype = {\r\n  diff: function diff(oldString, newString) {\r\n    var _options$timeout;\r\n\r\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\r\n    var callback = options.callback;\r\n\r\n    if (typeof options === 'function') {\r\n      callback = options;\r\n      options = {};\r\n    }\r\n\r\n    this.options = options;\r\n    var self = this;\r\n\r\n    function done(value) {\r\n      if (callback) {\r\n        setTimeout(function () {\r\n          callback(undefined, value);\r\n        }, 0);\r\n        return true;\r\n      } else {\r\n        return value;\r\n      }\r\n    } // Allow subclasses to massage the input prior to running\r\n\r\n\r\n    oldString = this.castInput(oldString);\r\n    newString = this.castInput(newString);\r\n    oldString = this.removeEmpty(this.tokenize(oldString));\r\n    newString = this.removeEmpty(this.tokenize(newString));\r\n    var newLen = newString.length,\r\n        oldLen = oldString.length;\r\n    var editLength = 1;\r\n    var maxEditLength = newLen + oldLen;\r\n\r\n    if (options.maxEditLength) {\r\n      maxEditLength = Math.min(maxEditLength, options.maxEditLength);\r\n    }\r\n\r\n    var maxExecutionTime = (_options$timeout = options.timeout) !== null && _options$timeout !== void 0 ? _options$timeout : Infinity;\r\n    var abortAfterTimestamp = Date.now() + maxExecutionTime;\r\n    var bestPath = [{\r\n      oldPos: -1,\r\n      lastComponent: undefined\r\n    }]; // Seed editLength = 0, i.e. the content starts with the same values\r\n\r\n    var newPos = this.extractCommon(bestPath[0], newString, oldString, 0);\r\n\r\n    if (bestPath[0].oldPos + 1 >= oldLen && newPos + 1 >= newLen) {\r\n      // Identity per the equality and tokenizer\r\n      return done([{\r\n        value: this.join(newString),\r\n        count: newString.length\r\n      }]);\r\n    } // Once we hit the right edge of the edit graph on some diagonal k, we can\r\n    // definitely reach the end of the edit graph in no more than k edits, so\r\n    // there's no point in considering any moves to diagonal k+1 any more (from\r\n    // which we're guaranteed to need at least k+1 more edits).\r\n    // Similarly, once we've reached the bottom of the edit graph, there's no\r\n    // point considering moves to lower diagonals.\r\n    // We record this fact by setting minDiagonalToConsider and\r\n    // maxDiagonalToConsider to some finite value once we've hit the edge of\r\n    // the edit graph.\r\n    // This optimization is not faithful to the original algorithm presented in\r\n    // Myers's paper, which instead pointlessly extends D-paths off the end of\r\n    // the edit graph - see page 7 of Myers's paper which notes this point\r\n    // explicitly and illustrates it with a diagram. This has major performance\r\n    // implications for some common scenarios. For instance, to compute a diff\r\n    // where the new text simply appends d characters on the end of the\r\n    // original text of length n, the true Myers algorithm will take O(n+d^2)\r\n    // time while this optimization needs only O(n+d) time.\r\n\r\n\r\n    var minDiagonalToConsider = -Infinity,\r\n        maxDiagonalToConsider = Infinity; // Main worker method. checks all permutations of a given edit length for acceptance.\r\n\r\n    function execEditLength() {\r\n      for (var diagonalPath = Math.max(minDiagonalToConsider, -editLength); diagonalPath <= Math.min(maxDiagonalToConsider, editLength); diagonalPath += 2) {\r\n        var basePath = void 0;\r\n        var removePath = bestPath[diagonalPath - 1],\r\n            addPath = bestPath[diagonalPath + 1];\r\n\r\n        if (removePath) {\r\n          // No one else is going to attempt to use this value, clear it\r\n          bestPath[diagonalPath - 1] = undefined;\r\n        }\r\n\r\n        var canAdd = false;\r\n\r\n        if (addPath) {\r\n          // what newPos will be after we do an insertion:\r\n          var addPathNewPos = addPath.oldPos - diagonalPath;\r\n          canAdd = addPath && 0 <= addPathNewPos && addPathNewPos < newLen;\r\n        }\r\n\r\n        var canRemove = removePath && removePath.oldPos + 1 < oldLen;\r\n\r\n        if (!canAdd && !canRemove) {\r\n          // If this path is a terminal then prune\r\n          bestPath[diagonalPath] = undefined;\r\n          continue;\r\n        } // Select the diagonal that we want to branch from. We select the prior\r\n        // path whose position in the old string is the farthest from the origin\r\n        // and does not pass the bounds of the diff graph\r\n        // TODO: Remove the `+ 1` here to make behavior match Myers algorithm\r\n        //       and prefer to order removals before insertions.\r\n\r\n\r\n        if (!canRemove || canAdd && removePath.oldPos + 1 < addPath.oldPos) {\r\n          basePath = self.addToPath(addPath, true, undefined, 0);\r\n        } else {\r\n          basePath = self.addToPath(removePath, undefined, true, 1);\r\n        }\r\n\r\n        newPos = self.extractCommon(basePath, newString, oldString, diagonalPath);\r\n\r\n        if (basePath.oldPos + 1 >= oldLen && newPos + 1 >= newLen) {\r\n          // If we have hit the end of both strings, then we are done\r\n          return done(buildValues(self, basePath.lastComponent, newString, oldString, self.useLongestToken));\r\n        } else {\r\n          bestPath[diagonalPath] = basePath;\r\n\r\n          if (basePath.oldPos + 1 >= oldLen) {\r\n            maxDiagonalToConsider = Math.min(maxDiagonalToConsider, diagonalPath - 1);\r\n          }\r\n\r\n          if (newPos + 1 >= newLen) {\r\n            minDiagonalToConsider = Math.max(minDiagonalToConsider, diagonalPath + 1);\r\n          }\r\n        }\r\n      }\r\n\r\n      editLength++;\r\n    } // Performs the length of edit iteration. Is a bit fugly as this has to support the\r\n    // sync and async mode which is never fun. Loops over execEditLength until a value\r\n    // is produced, or until the edit length exceeds options.maxEditLength (if given),\r\n    // in which case it will return undefined.\r\n\r\n\r\n    if (callback) {\r\n      (function exec() {\r\n        setTimeout(function () {\r\n          if (editLength > maxEditLength || Date.now() > abortAfterTimestamp) {\r\n            return callback();\r\n          }\r\n\r\n          if (!execEditLength()) {\r\n            exec();\r\n          }\r\n        }, 0);\r\n      })();\r\n    } else {\r\n      while (editLength <= maxEditLength && Date.now() <= abortAfterTimestamp) {\r\n        var ret = execEditLength();\r\n\r\n        if (ret) {\r\n          return ret;\r\n        }\r\n      }\r\n    }\r\n  },\r\n  addToPath: function addToPath(path, added, removed, oldPosInc) {\r\n    var last = path.lastComponent;\r\n\r\n    if (last && last.added === added && last.removed === removed) {\r\n      return {\r\n        oldPos: path.oldPos + oldPosInc,\r\n        lastComponent: {\r\n          count: last.count + 1,\r\n          added: added,\r\n          removed: removed,\r\n          previousComponent: last.previousComponent\r\n        }\r\n      };\r\n    } else {\r\n      return {\r\n        oldPos: path.oldPos + oldPosInc,\r\n        lastComponent: {\r\n          count: 1,\r\n          added: added,\r\n          removed: removed,\r\n          previousComponent: last\r\n        }\r\n      };\r\n    }\r\n  },\r\n  extractCommon: function extractCommon(basePath, newString, oldString, diagonalPath) {\r\n    var newLen = newString.length,\r\n        oldLen = oldString.length,\r\n        oldPos = basePath.oldPos,\r\n        newPos = oldPos - diagonalPath,\r\n        commonCount = 0;\r\n\r\n    while (newPos + 1 < newLen && oldPos + 1 < oldLen && this.equals(newString[newPos + 1], oldString[oldPos + 1])) {\r\n      newPos++;\r\n      oldPos++;\r\n      commonCount++;\r\n    }\r\n\r\n    if (commonCount) {\r\n      basePath.lastComponent = {\r\n        count: commonCount,\r\n        previousComponent: basePath.lastComponent\r\n      };\r\n    }\r\n\r\n    basePath.oldPos = oldPos;\r\n    return newPos;\r\n  },\r\n  equals: function equals(left, right) {\r\n    if (this.options.comparator) {\r\n      return this.options.comparator(left, right);\r\n    } else {\r\n      return left === right || this.options.ignoreCase && left.toLowerCase() === right.toLowerCase();\r\n    }\r\n  },\r\n  removeEmpty: function removeEmpty(array) {\r\n    var ret = [];\r\n\r\n    for (var i = 0; i < array.length; i++) {\r\n      if (array[i]) {\r\n        ret.push(array[i]);\r\n      }\r\n    }\r\n\r\n    return ret;\r\n  },\r\n  castInput: function castInput(value) {\r\n    return value;\r\n  },\r\n  tokenize: function tokenize(value) {\r\n    return value.split('');\r\n  },\r\n  join: function join(chars) {\r\n    return chars.join('');\r\n  }\r\n};\r\n\r\nfunction buildValues(diff, lastComponent, newString, oldString, useLongestToken) {\r\n  // First we convert our linked list of components in reverse order to an\r\n  // array in the right order:\r\n  var components = [];\r\n  var nextComponent;\r\n\r\n  while (lastComponent) {\r\n    components.push(lastComponent);\r\n    nextComponent = lastComponent.previousComponent;\r\n    delete lastComponent.previousComponent;\r\n    lastComponent = nextComponent;\r\n  }\r\n\r\n  components.reverse();\r\n  var componentPos = 0,\r\n      componentLen = components.length,\r\n      newPos = 0,\r\n      oldPos = 0;\r\n\r\n  for (; componentPos < componentLen; componentPos++) {\r\n    var component = components[componentPos];\r\n\r\n    if (!component.removed) {\r\n      if (!component.added && useLongestToken) {\r\n        var value = newString.slice(newPos, newPos + component.count);\r\n        value = value.map(function (value, i) {\r\n          var oldValue = oldString[oldPos + i];\r\n          return oldValue.length > value.length ? oldValue : value;\r\n        });\r\n        component.value = diff.join(value);\r\n      } else {\r\n        component.value = diff.join(newString.slice(newPos, newPos + component.count));\r\n      }\r\n\r\n      newPos += component.count; // Common case\r\n\r\n      if (!component.added) {\r\n        oldPos += component.count;\r\n      }\r\n    } else {\r\n      component.value = diff.join(oldString.slice(oldPos, oldPos + component.count));\r\n      oldPos += component.count; // Reverse add and remove so removes are output first to match common convention\r\n      // The diffing algorithm is tied to add then remove output and this is the simplest\r\n      // route to get the desired output with minimal overhead.\r\n\r\n      if (componentPos && components[componentPos - 1].added) {\r\n        var tmp = components[componentPos - 1];\r\n        components[componentPos - 1] = components[componentPos];\r\n        components[componentPos] = tmp;\r\n      }\r\n    }\r\n  } // Special case handle for when one terminal is ignored (i.e. whitespace).\r\n  // For this case we merge the terminal into the prior string and drop the change.\r\n  // This is only available for string mode.\r\n\r\n\r\n  var finalComponent = components[componentLen - 1];\r\n\r\n  if (componentLen > 1 && typeof finalComponent.value === 'string' && (finalComponent.added || finalComponent.removed) && diff.equals('', finalComponent.value)) {\r\n    components[componentLen - 2].value += finalComponent.value;\r\n    components.pop();\r\n  }\r\n\r\n  return components;\r\n}\r\n\r\nvar characterDiff = new Diff();\r\nfunction diffChars(oldStr, newStr, options) {\r\n  return characterDiff.diff(oldStr, newStr, options);\r\n}\r\n\r\nfunction generateOptions(options, defaults) {\r\n  if (typeof options === 'function') {\r\n    defaults.callback = options;\r\n  } else if (options) {\r\n    for (var name in options) {\r\n      /* istanbul ignore else */\r\n      if (options.hasOwnProperty(name)) {\r\n        defaults[name] = options[name];\r\n      }\r\n    }\r\n  }\r\n\r\n  return defaults;\r\n}\r\n\r\n//\r\n// Ranges and exceptions:\r\n// Latin-1 Supplement, 0080–00FF\r\n//  - U+00D7  × Multiplication sign\r\n//  - U+00F7  ÷ Division sign\r\n// Latin Extended-A, 0100–017F\r\n// Latin Extended-B, 0180–024F\r\n// IPA Extensions, 0250–02AF\r\n// Spacing Modifier Letters, 02B0–02FF\r\n//  - U+02C7  ˇ &#711;  Caron\r\n//  - U+02D8  ˘ &#728;  Breve\r\n//  - U+02D9  ˙ &#729;  Dot Above\r\n//  - U+02DA  ˚ &#730;  Ring Above\r\n//  - U+02DB  ˛ &#731;  Ogonek\r\n//  - U+02DC  ˜ &#732;  Small Tilde\r\n//  - U+02DD  ˝ &#733;  Double Acute Accent\r\n// Latin Extended Additional, 1E00–1EFF\r\n\r\nvar extendedWordChars = /^[A-Za-z\\xC0-\\u02C6\\u02C8-\\u02D7\\u02DE-\\u02FF\\u1E00-\\u1EFF]+$/;\r\nvar reWhitespace = /\\S/;\r\nvar wordDiff = new Diff();\r\n\r\nwordDiff.equals = function (left, right) {\r\n  if (this.options.ignoreCase) {\r\n    left = left.toLowerCase();\r\n    right = right.toLowerCase();\r\n  }\r\n\r\n  return left === right || this.options.ignoreWhitespace && !reWhitespace.test(left) && !reWhitespace.test(right);\r\n};\r\n\r\nwordDiff.tokenize = function (value) {\r\n  // All whitespace symbols except newline group into one token, each newline - in separate token\r\n  var tokens = value.split(/([^\\S\\r\\n]+|[()[\\]{}'\"\\r\\n]|\\b)/); // Join the boundary splits that we do not consider to be boundaries. This is primarily the extended Latin character set.\r\n\r\n  for (var i = 0; i < tokens.length - 1; i++) {\r\n    // If we have an empty string in the next field and we have only word chars before and after, merge\r\n    if (!tokens[i + 1] && tokens[i + 2] && extendedWordChars.test(tokens[i]) && extendedWordChars.test(tokens[i + 2])) {\r\n      tokens[i] += tokens[i + 2];\r\n      tokens.splice(i + 1, 2);\r\n      i--;\r\n    }\r\n  }\r\n\r\n  return tokens;\r\n};\r\n\r\nfunction diffWords(oldStr, newStr, options) {\r\n  options = generateOptions(options, {\r\n    ignoreWhitespace: true\r\n  });\r\n  return wordDiff.diff(oldStr, newStr, options);\r\n}\r\nfunction diffWordsWithSpace(oldStr, newStr, options) {\r\n  return wordDiff.diff(oldStr, newStr, options);\r\n}\r\n\r\nvar lineDiff = new Diff();\r\n\r\nlineDiff.tokenize = function (value) {\r\n  if (this.options.stripTrailingCr) {\r\n    // remove one \\r before \\n to match GNU diff's --strip-trailing-cr behavior\r\n    value = value.replace(/\\r\\n/g, '\\n');\r\n  }\r\n\r\n  var retLines = [],\r\n      linesAndNewlines = value.split(/(\\n|\\r\\n)/); // Ignore the final empty token that occurs if the string ends with a new line\r\n\r\n  if (!linesAndNewlines[linesAndNewlines.length - 1]) {\r\n    linesAndNewlines.pop();\r\n  } // Merge the content and line separators into single tokens\r\n\r\n\r\n  for (var i = 0; i < linesAndNewlines.length; i++) {\r\n    var line = linesAndNewlines[i];\r\n\r\n    if (i % 2 && !this.options.newlineIsToken) {\r\n      retLines[retLines.length - 1] += line;\r\n    } else {\r\n      if (this.options.ignoreWhitespace) {\r\n        line = line.trim();\r\n      }\r\n\r\n      retLines.push(line);\r\n    }\r\n  }\r\n\r\n  return retLines;\r\n};\r\n\r\nfunction diffLines(oldStr, newStr, callback) {\r\n  return lineDiff.diff(oldStr, newStr, callback);\r\n}\r\nfunction diffTrimmedLines(oldStr, newStr, callback) {\r\n  var options = generateOptions(callback, {\r\n    ignoreWhitespace: true\r\n  });\r\n  return lineDiff.diff(oldStr, newStr, options);\r\n}\r\n\r\nvar sentenceDiff = new Diff();\r\n\r\nsentenceDiff.tokenize = function (value) {\r\n  return value.split(/(\\S.+?[.!?])(?=\\s+|$)/);\r\n};\r\n\r\nfunction diffSentences(oldStr, newStr, callback) {\r\n  return sentenceDiff.diff(oldStr, newStr, callback);\r\n}\r\n\r\nvar cssDiff = new Diff();\r\n\r\ncssDiff.tokenize = function (value) {\r\n  return value.split(/([{}:;,]|\\s+)/);\r\n};\r\n\r\nfunction diffCss(oldStr, newStr, callback) {\r\n  return cssDiff.diff(oldStr, newStr, callback);\r\n}\r\n\r\nfunction _typeof(obj) {\r\n  \"@babel/helpers - typeof\";\r\n\r\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\r\n    _typeof = function (obj) {\r\n      return typeof obj;\r\n    };\r\n  } else {\r\n    _typeof = function (obj) {\r\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\r\n    };\r\n  }\r\n\r\n  return _typeof(obj);\r\n}\r\n\r\nfunction _defineProperty(obj, key, value) {\r\n  if (key in obj) {\r\n    Object.defineProperty(obj, key, {\r\n      value: value,\r\n      enumerable: true,\r\n      configurable: true,\r\n      writable: true\r\n    });\r\n  } else {\r\n    obj[key] = value;\r\n  }\r\n\r\n  return obj;\r\n}\r\n\r\nfunction ownKeys(object, enumerableOnly) {\r\n  var keys = Object.keys(object);\r\n\r\n  if (Object.getOwnPropertySymbols) {\r\n    var symbols = Object.getOwnPropertySymbols(object);\r\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\r\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\r\n    });\r\n    keys.push.apply(keys, symbols);\r\n  }\r\n\r\n  return keys;\r\n}\r\n\r\nfunction _objectSpread2(target) {\r\n  for (var i = 1; i < arguments.length; i++) {\r\n    var source = arguments[i] != null ? arguments[i] : {};\r\n\r\n    if (i % 2) {\r\n      ownKeys(Object(source), true).forEach(function (key) {\r\n        _defineProperty(target, key, source[key]);\r\n      });\r\n    } else if (Object.getOwnPropertyDescriptors) {\r\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\r\n    } else {\r\n      ownKeys(Object(source)).forEach(function (key) {\r\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\r\n      });\r\n    }\r\n  }\r\n\r\n  return target;\r\n}\r\n\r\nfunction _toConsumableArray(arr) {\r\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\r\n}\r\n\r\nfunction _arrayWithoutHoles(arr) {\r\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\r\n}\r\n\r\nfunction _iterableToArray(iter) {\r\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\r\n}\r\n\r\nfunction _unsupportedIterableToArray(o, minLen) {\r\n  if (!o) return;\r\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\r\n  var n = Object.prototype.toString.call(o).slice(8, -1);\r\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\r\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\r\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\r\n}\r\n\r\nfunction _arrayLikeToArray(arr, len) {\r\n  if (len == null || len > arr.length) len = arr.length;\r\n\r\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\r\n\r\n  return arr2;\r\n}\r\n\r\nfunction _nonIterableSpread() {\r\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\r\n}\r\n\r\nvar objectPrototypeToString = Object.prototype.toString;\r\nvar jsonDiff = new Diff(); // Discriminate between two lines of pretty-printed, serialized JSON where one of them has a\r\n// dangling comma and the other doesn't. Turns out including the dangling comma yields the nicest output:\r\n\r\njsonDiff.useLongestToken = true;\r\njsonDiff.tokenize = lineDiff.tokenize;\r\n\r\njsonDiff.castInput = function (value) {\r\n  var _this$options = this.options,\r\n      undefinedReplacement = _this$options.undefinedReplacement,\r\n      _this$options$stringi = _this$options.stringifyReplacer,\r\n      stringifyReplacer = _this$options$stringi === void 0 ? function (k, v) {\r\n    return typeof v === 'undefined' ? undefinedReplacement : v;\r\n  } : _this$options$stringi;\r\n  return typeof value === 'string' ? value : JSON.stringify(canonicalize(value, null, null, stringifyReplacer), stringifyReplacer, '  ');\r\n};\r\n\r\njsonDiff.equals = function (left, right) {\r\n  return Diff.prototype.equals.call(jsonDiff, left.replace(/,([\\r\\n])/g, '$1'), right.replace(/,([\\r\\n])/g, '$1'));\r\n};\r\n\r\nfunction diffJson(oldObj, newObj, options) {\r\n  return jsonDiff.diff(oldObj, newObj, options);\r\n} // This function handles the presence of circular references by bailing out when encountering an\r\n// object that is already on the \"stack\" of items being processed. Accepts an optional replacer\r\n\r\nfunction canonicalize(obj, stack, replacementStack, replacer, key) {\r\n  stack = stack || [];\r\n  replacementStack = replacementStack || [];\r\n\r\n  if (replacer) {\r\n    obj = replacer(key, obj);\r\n  }\r\n\r\n  var i;\r\n\r\n  for (i = 0; i < stack.length; i += 1) {\r\n    if (stack[i] === obj) {\r\n      return replacementStack[i];\r\n    }\r\n  }\r\n\r\n  var canonicalizedObj;\r\n\r\n  if ('[object Array]' === objectPrototypeToString.call(obj)) {\r\n    stack.push(obj);\r\n    canonicalizedObj = new Array(obj.length);\r\n    replacementStack.push(canonicalizedObj);\r\n\r\n    for (i = 0; i < obj.length; i += 1) {\r\n      canonicalizedObj[i] = canonicalize(obj[i], stack, replacementStack, replacer, key);\r\n    }\r\n\r\n    stack.pop();\r\n    replacementStack.pop();\r\n    return canonicalizedObj;\r\n  }\r\n\r\n  if (obj && obj.toJSON) {\r\n    obj = obj.toJSON();\r\n  }\r\n\r\n  if (_typeof(obj) === 'object' && obj !== null) {\r\n    stack.push(obj);\r\n    canonicalizedObj = {};\r\n    replacementStack.push(canonicalizedObj);\r\n\r\n    var sortedKeys = [],\r\n        _key;\r\n\r\n    for (_key in obj) {\r\n      /* istanbul ignore else */\r\n      if (obj.hasOwnProperty(_key)) {\r\n        sortedKeys.push(_key);\r\n      }\r\n    }\r\n\r\n    sortedKeys.sort();\r\n\r\n    for (i = 0; i < sortedKeys.length; i += 1) {\r\n      _key = sortedKeys[i];\r\n      canonicalizedObj[_key] = canonicalize(obj[_key], stack, replacementStack, replacer, _key);\r\n    }\r\n\r\n    stack.pop();\r\n    replacementStack.pop();\r\n  } else {\r\n    canonicalizedObj = obj;\r\n  }\r\n\r\n  return canonicalizedObj;\r\n}\r\n\r\nvar arrayDiff = new Diff();\r\n\r\narrayDiff.tokenize = function (value) {\r\n  return value.slice();\r\n};\r\n\r\narrayDiff.join = arrayDiff.removeEmpty = function (value) {\r\n  return value;\r\n};\r\n\r\nfunction diffArrays(oldArr, newArr, callback) {\r\n  return arrayDiff.diff(oldArr, newArr, callback);\r\n}\r\n\r\nfunction parsePatch(uniDiff) {\r\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n  var diffstr = uniDiff.split(/\\r\\n|[\\n\\v\\f\\r\\x85]/),\r\n      delimiters = uniDiff.match(/\\r\\n|[\\n\\v\\f\\r\\x85]/g) || [],\r\n      list = [],\r\n      i = 0;\r\n\r\n  function parseIndex() {\r\n    var index = {};\r\n    list.push(index); // Parse diff metadata\r\n\r\n    while (i < diffstr.length) {\r\n      var line = diffstr[i]; // File header found, end parsing diff metadata\r\n\r\n      if (/^(\\-\\-\\-|\\+\\+\\+|@@)\\s/.test(line)) {\r\n        break;\r\n      } // Diff index\r\n\r\n\r\n      var header = /^(?:Index:|diff(?: -r \\w+)+)\\s+(.+?)\\s*$/.exec(line);\r\n\r\n      if (header) {\r\n        index.index = header[1];\r\n      }\r\n\r\n      i++;\r\n    } // Parse file headers if they are defined. Unified diff requires them, but\r\n    // there's no technical issues to have an isolated hunk without file header\r\n\r\n\r\n    parseFileHeader(index);\r\n    parseFileHeader(index); // Parse hunks\r\n\r\n    index.hunks = [];\r\n\r\n    while (i < diffstr.length) {\r\n      var _line = diffstr[i];\r\n\r\n      if (/^(Index:|diff|\\-\\-\\-|\\+\\+\\+)\\s/.test(_line)) {\r\n        break;\r\n      } else if (/^@@/.test(_line)) {\r\n        index.hunks.push(parseHunk());\r\n      } else if (_line && options.strict) {\r\n        // Ignore unexpected content unless in strict mode\r\n        throw new Error('Unknown line ' + (i + 1) + ' ' + JSON.stringify(_line));\r\n      } else {\r\n        i++;\r\n      }\r\n    }\r\n  } // Parses the --- and +++ headers, if none are found, no lines\r\n  // are consumed.\r\n\r\n\r\n  function parseFileHeader(index) {\r\n    var fileHeader = /^(---|\\+\\+\\+)\\s+(.*)$/.exec(diffstr[i]);\r\n\r\n    if (fileHeader) {\r\n      var keyPrefix = fileHeader[1] === '---' ? 'old' : 'new';\r\n      var data = fileHeader[2].split('\\t', 2);\r\n      var fileName = data[0].replace(/\\\\\\\\/g, '\\\\');\r\n\r\n      if (/^\".*\"$/.test(fileName)) {\r\n        fileName = fileName.substr(1, fileName.length - 2);\r\n      }\r\n\r\n      index[keyPrefix + 'FileName'] = fileName;\r\n      index[keyPrefix + 'Header'] = (data[1] || '').trim();\r\n      i++;\r\n    }\r\n  } // Parses a hunk\r\n  // This assumes that we are at the start of a hunk.\r\n\r\n\r\n  function parseHunk() {\r\n    var chunkHeaderIndex = i,\r\n        chunkHeaderLine = diffstr[i++],\r\n        chunkHeader = chunkHeaderLine.split(/@@ -(\\d+)(?:,(\\d+))? \\+(\\d+)(?:,(\\d+))? @@/);\r\n    var hunk = {\r\n      oldStart: +chunkHeader[1],\r\n      oldLines: typeof chunkHeader[2] === 'undefined' ? 1 : +chunkHeader[2],\r\n      newStart: +chunkHeader[3],\r\n      newLines: typeof chunkHeader[4] === 'undefined' ? 1 : +chunkHeader[4],\r\n      lines: [],\r\n      linedelimiters: []\r\n    }; // Unified Diff Format quirk: If the chunk size is 0,\r\n    // the first number is one lower than one would expect.\r\n    // https://www.artima.com/weblogs/viewpost.jsp?thread=164293\r\n\r\n    if (hunk.oldLines === 0) {\r\n      hunk.oldStart += 1;\r\n    }\r\n\r\n    if (hunk.newLines === 0) {\r\n      hunk.newStart += 1;\r\n    }\r\n\r\n    var addCount = 0,\r\n        removeCount = 0;\r\n\r\n    for (; i < diffstr.length; i++) {\r\n      // Lines starting with '---' could be mistaken for the \"remove line\" operation\r\n      // But they could be the header for the next file. Therefore prune such cases out.\r\n      if (diffstr[i].indexOf('--- ') === 0 && i + 2 < diffstr.length && diffstr[i + 1].indexOf('+++ ') === 0 && diffstr[i + 2].indexOf('@@') === 0) {\r\n        break;\r\n      }\r\n\r\n      var operation = diffstr[i].length == 0 && i != diffstr.length - 1 ? ' ' : diffstr[i][0];\r\n\r\n      if (operation === '+' || operation === '-' || operation === ' ' || operation === '\\\\') {\r\n        hunk.lines.push(diffstr[i]);\r\n        hunk.linedelimiters.push(delimiters[i] || '\\n');\r\n\r\n        if (operation === '+') {\r\n          addCount++;\r\n        } else if (operation === '-') {\r\n          removeCount++;\r\n        } else if (operation === ' ') {\r\n          addCount++;\r\n          removeCount++;\r\n        }\r\n      } else {\r\n        break;\r\n      }\r\n    } // Handle the empty block count case\r\n\r\n\r\n    if (!addCount && hunk.newLines === 1) {\r\n      hunk.newLines = 0;\r\n    }\r\n\r\n    if (!removeCount && hunk.oldLines === 1) {\r\n      hunk.oldLines = 0;\r\n    } // Perform optional sanity checking\r\n\r\n\r\n    if (options.strict) {\r\n      if (addCount !== hunk.newLines) {\r\n        throw new Error('Added line count did not match for hunk at line ' + (chunkHeaderIndex + 1));\r\n      }\r\n\r\n      if (removeCount !== hunk.oldLines) {\r\n        throw new Error('Removed line count did not match for hunk at line ' + (chunkHeaderIndex + 1));\r\n      }\r\n    }\r\n\r\n    return hunk;\r\n  }\r\n\r\n  while (i < diffstr.length) {\r\n    parseIndex();\r\n  }\r\n\r\n  return list;\r\n}\r\n\r\n// Iterator that traverses in the range of [min, max], stepping\r\n// by distance from a given start position. I.e. for [0, 4], with\r\n// start of 2, this will iterate 2, 3, 1, 4, 0.\r\nfunction distanceIterator (start, minLine, maxLine) {\r\n  var wantForward = true,\r\n      backwardExhausted = false,\r\n      forwardExhausted = false,\r\n      localOffset = 1;\r\n  return function iterator() {\r\n    if (wantForward && !forwardExhausted) {\r\n      if (backwardExhausted) {\r\n        localOffset++;\r\n      } else {\r\n        wantForward = false;\r\n      } // Check if trying to fit beyond text length, and if not, check it fits\r\n      // after offset location (or desired location on first iteration)\r\n\r\n\r\n      if (start + localOffset <= maxLine) {\r\n        return localOffset;\r\n      }\r\n\r\n      forwardExhausted = true;\r\n    }\r\n\r\n    if (!backwardExhausted) {\r\n      if (!forwardExhausted) {\r\n        wantForward = true;\r\n      } // Check if trying to fit before text beginning, and if not, check it fits\r\n      // before offset location\r\n\r\n\r\n      if (minLine <= start - localOffset) {\r\n        return -localOffset++;\r\n      }\r\n\r\n      backwardExhausted = true;\r\n      return iterator();\r\n    } // We tried to fit hunk before text beginning and beyond text length, then\r\n    // hunk can't fit on the text. Return undefined\r\n\r\n  };\r\n}\r\n\r\nfunction applyPatch(source, uniDiff) {\r\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\r\n\r\n  if (typeof uniDiff === 'string') {\r\n    uniDiff = parsePatch(uniDiff);\r\n  }\r\n\r\n  if (Array.isArray(uniDiff)) {\r\n    if (uniDiff.length > 1) {\r\n      throw new Error('applyPatch only works with a single input.');\r\n    }\r\n\r\n    uniDiff = uniDiff[0];\r\n  } // Apply the diff to the input\r\n\r\n\r\n  var lines = source.split(/\\r\\n|[\\n\\v\\f\\r\\x85]/),\r\n      delimiters = source.match(/\\r\\n|[\\n\\v\\f\\r\\x85]/g) || [],\r\n      hunks = uniDiff.hunks,\r\n      compareLine = options.compareLine || function (lineNumber, line, operation, patchContent) {\r\n    return line === patchContent;\r\n  },\r\n      errorCount = 0,\r\n      fuzzFactor = options.fuzzFactor || 0,\r\n      minLine = 0,\r\n      offset = 0,\r\n      removeEOFNL,\r\n      addEOFNL;\r\n  /**\r\n   * Checks if the hunk exactly fits on the provided location\r\n   */\r\n\r\n\r\n  function hunkFits(hunk, toPos) {\r\n    for (var j = 0; j < hunk.lines.length; j++) {\r\n      var line = hunk.lines[j],\r\n          operation = line.length > 0 ? line[0] : ' ',\r\n          content = line.length > 0 ? line.substr(1) : line;\r\n\r\n      if (operation === ' ' || operation === '-') {\r\n        // Context sanity check\r\n        if (!compareLine(toPos + 1, lines[toPos], operation, content)) {\r\n          errorCount++;\r\n\r\n          if (errorCount > fuzzFactor) {\r\n            return false;\r\n          }\r\n        }\r\n\r\n        toPos++;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  } // Search best fit offsets for each hunk based on the previous ones\r\n\r\n\r\n  for (var i = 0; i < hunks.length; i++) {\r\n    var hunk = hunks[i],\r\n        maxLine = lines.length - hunk.oldLines,\r\n        localOffset = 0,\r\n        toPos = offset + hunk.oldStart - 1;\r\n    var iterator = distanceIterator(toPos, minLine, maxLine);\r\n\r\n    for (; localOffset !== undefined; localOffset = iterator()) {\r\n      if (hunkFits(hunk, toPos + localOffset)) {\r\n        hunk.offset = offset += localOffset;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (localOffset === undefined) {\r\n      return false;\r\n    } // Set lower text limit to end of the current hunk, so next ones don't try\r\n    // to fit over already patched text\r\n\r\n\r\n    minLine = hunk.offset + hunk.oldStart + hunk.oldLines;\r\n  } // Apply patch hunks\r\n\r\n\r\n  var diffOffset = 0;\r\n\r\n  for (var _i = 0; _i < hunks.length; _i++) {\r\n    var _hunk = hunks[_i],\r\n        _toPos = _hunk.oldStart + _hunk.offset + diffOffset - 1;\r\n\r\n    diffOffset += _hunk.newLines - _hunk.oldLines;\r\n\r\n    for (var j = 0; j < _hunk.lines.length; j++) {\r\n      var line = _hunk.lines[j],\r\n          operation = line.length > 0 ? line[0] : ' ',\r\n          content = line.length > 0 ? line.substr(1) : line,\r\n          delimiter = _hunk.linedelimiters && _hunk.linedelimiters[j] || '\\n';\r\n\r\n      if (operation === ' ') {\r\n        _toPos++;\r\n      } else if (operation === '-') {\r\n        lines.splice(_toPos, 1);\r\n        delimiters.splice(_toPos, 1);\r\n        /* istanbul ignore else */\r\n      } else if (operation === '+') {\r\n        lines.splice(_toPos, 0, content);\r\n        delimiters.splice(_toPos, 0, delimiter);\r\n        _toPos++;\r\n      } else if (operation === '\\\\') {\r\n        var previousOperation = _hunk.lines[j - 1] ? _hunk.lines[j - 1][0] : null;\r\n\r\n        if (previousOperation === '+') {\r\n          removeEOFNL = true;\r\n        } else if (previousOperation === '-') {\r\n          addEOFNL = true;\r\n        }\r\n      }\r\n    }\r\n  } // Handle EOFNL insertion/removal\r\n\r\n\r\n  if (removeEOFNL) {\r\n    while (!lines[lines.length - 1]) {\r\n      lines.pop();\r\n      delimiters.pop();\r\n    }\r\n  } else if (addEOFNL) {\r\n    lines.push('');\r\n    delimiters.push('\\n');\r\n  }\r\n\r\n  for (var _k = 0; _k < lines.length - 1; _k++) {\r\n    lines[_k] = lines[_k] + delimiters[_k];\r\n  }\r\n\r\n  return lines.join('');\r\n} // Wrapper that supports multiple file patches via callbacks.\r\n\r\nfunction applyPatches(uniDiff, options) {\r\n  if (typeof uniDiff === 'string') {\r\n    uniDiff = parsePatch(uniDiff);\r\n  }\r\n\r\n  var currentIndex = 0;\r\n\r\n  function processIndex() {\r\n    var index = uniDiff[currentIndex++];\r\n\r\n    if (!index) {\r\n      return options.complete();\r\n    }\r\n\r\n    options.loadFile(index, function (err, data) {\r\n      if (err) {\r\n        return options.complete(err);\r\n      }\r\n\r\n      var updatedContent = applyPatch(data, index, options);\r\n      options.patched(index, updatedContent, function (err) {\r\n        if (err) {\r\n          return options.complete(err);\r\n        }\r\n\r\n        processIndex();\r\n      });\r\n    });\r\n  }\r\n\r\n  processIndex();\r\n}\r\n\r\nfunction structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {\r\n  if (!options) {\r\n    options = {};\r\n  }\r\n\r\n  if (typeof options.context === 'undefined') {\r\n    options.context = 4;\r\n  }\r\n\r\n  var diff = diffLines(oldStr, newStr, options);\r\n\r\n  if (!diff) {\r\n    return;\r\n  }\r\n\r\n  diff.push({\r\n    value: '',\r\n    lines: []\r\n  }); // Append an empty value to make cleanup easier\r\n\r\n  function contextLines(lines) {\r\n    return lines.map(function (entry) {\r\n      return ' ' + entry;\r\n    });\r\n  }\r\n\r\n  var hunks = [];\r\n  var oldRangeStart = 0,\r\n      newRangeStart = 0,\r\n      curRange = [],\r\n      oldLine = 1,\r\n      newLine = 1;\r\n\r\n  var _loop = function _loop(i) {\r\n    var current = diff[i],\r\n        lines = current.lines || current.value.replace(/\\n$/, '').split('\\n');\r\n    current.lines = lines;\r\n\r\n    if (current.added || current.removed) {\r\n      var _curRange;\r\n\r\n      // If we have previous context, start with that\r\n      if (!oldRangeStart) {\r\n        var prev = diff[i - 1];\r\n        oldRangeStart = oldLine;\r\n        newRangeStart = newLine;\r\n\r\n        if (prev) {\r\n          curRange = options.context > 0 ? contextLines(prev.lines.slice(-options.context)) : [];\r\n          oldRangeStart -= curRange.length;\r\n          newRangeStart -= curRange.length;\r\n        }\r\n      } // Output our changes\r\n\r\n\r\n      (_curRange = curRange).push.apply(_curRange, _toConsumableArray(lines.map(function (entry) {\r\n        return (current.added ? '+' : '-') + entry;\r\n      }))); // Track the updated file position\r\n\r\n\r\n      if (current.added) {\r\n        newLine += lines.length;\r\n      } else {\r\n        oldLine += lines.length;\r\n      }\r\n    } else {\r\n      // Identical context lines. Track line changes\r\n      if (oldRangeStart) {\r\n        // Close out any changes that have been output (or join overlapping)\r\n        if (lines.length <= options.context * 2 && i < diff.length - 2) {\r\n          var _curRange2;\r\n\r\n          // Overlapping\r\n          (_curRange2 = curRange).push.apply(_curRange2, _toConsumableArray(contextLines(lines)));\r\n        } else {\r\n          var _curRange3;\r\n\r\n          // end the range and output\r\n          var contextSize = Math.min(lines.length, options.context);\r\n\r\n          (_curRange3 = curRange).push.apply(_curRange3, _toConsumableArray(contextLines(lines.slice(0, contextSize))));\r\n\r\n          var hunk = {\r\n            oldStart: oldRangeStart,\r\n            oldLines: oldLine - oldRangeStart + contextSize,\r\n            newStart: newRangeStart,\r\n            newLines: newLine - newRangeStart + contextSize,\r\n            lines: curRange\r\n          };\r\n\r\n          if (i >= diff.length - 2 && lines.length <= options.context) {\r\n            // EOF is inside this hunk\r\n            var oldEOFNewline = /\\n$/.test(oldStr);\r\n            var newEOFNewline = /\\n$/.test(newStr);\r\n            var noNlBeforeAdds = lines.length == 0 && curRange.length > hunk.oldLines;\r\n\r\n            if (!oldEOFNewline && noNlBeforeAdds && oldStr.length > 0) {\r\n              // special case: old has no eol and no trailing context; no-nl can end up before adds\r\n              // however, if the old file is empty, do not output the no-nl line\r\n              curRange.splice(hunk.oldLines, 0, '\\\\ No newline at end of file');\r\n            }\r\n\r\n            if (!oldEOFNewline && !noNlBeforeAdds || !newEOFNewline) {\r\n              curRange.push('\\\\ No newline at end of file');\r\n            }\r\n          }\r\n\r\n          hunks.push(hunk);\r\n          oldRangeStart = 0;\r\n          newRangeStart = 0;\r\n          curRange = [];\r\n        }\r\n      }\r\n\r\n      oldLine += lines.length;\r\n      newLine += lines.length;\r\n    }\r\n  };\r\n\r\n  for (var i = 0; i < diff.length; i++) {\r\n    _loop(i);\r\n  }\r\n\r\n  return {\r\n    oldFileName: oldFileName,\r\n    newFileName: newFileName,\r\n    oldHeader: oldHeader,\r\n    newHeader: newHeader,\r\n    hunks: hunks\r\n  };\r\n}\r\nfunction formatPatch(diff) {\r\n  if (Array.isArray(diff)) {\r\n    return diff.map(formatPatch).join('\\n');\r\n  }\r\n\r\n  var ret = [];\r\n\r\n  if (diff.oldFileName == diff.newFileName) {\r\n    ret.push('Index: ' + diff.oldFileName);\r\n  }\r\n\r\n  ret.push('===================================================================');\r\n  ret.push('--- ' + diff.oldFileName + (typeof diff.oldHeader === 'undefined' ? '' : '\\t' + diff.oldHeader));\r\n  ret.push('+++ ' + diff.newFileName + (typeof diff.newHeader === 'undefined' ? '' : '\\t' + diff.newHeader));\r\n\r\n  for (var i = 0; i < diff.hunks.length; i++) {\r\n    var hunk = diff.hunks[i]; // Unified Diff Format quirk: If the chunk size is 0,\r\n    // the first number is one lower than one would expect.\r\n    // https://www.artima.com/weblogs/viewpost.jsp?thread=164293\r\n\r\n    if (hunk.oldLines === 0) {\r\n      hunk.oldStart -= 1;\r\n    }\r\n\r\n    if (hunk.newLines === 0) {\r\n      hunk.newStart -= 1;\r\n    }\r\n\r\n    ret.push('@@ -' + hunk.oldStart + ',' + hunk.oldLines + ' +' + hunk.newStart + ',' + hunk.newLines + ' @@');\r\n    ret.push.apply(ret, hunk.lines);\r\n  }\r\n\r\n  return ret.join('\\n') + '\\n';\r\n}\r\nfunction createTwoFilesPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {\r\n  return formatPatch(structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options));\r\n}\r\nfunction createPatch(fileName, oldStr, newStr, oldHeader, newHeader, options) {\r\n  return createTwoFilesPatch(fileName, fileName, oldStr, newStr, oldHeader, newHeader, options);\r\n}\r\n\r\nfunction arrayEqual(a, b) {\r\n  if (a.length !== b.length) {\r\n    return false;\r\n  }\r\n\r\n  return arrayStartsWith(a, b);\r\n}\r\nfunction arrayStartsWith(array, start) {\r\n  if (start.length > array.length) {\r\n    return false;\r\n  }\r\n\r\n  for (var i = 0; i < start.length; i++) {\r\n    if (start[i] !== array[i]) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction calcLineCount(hunk) {\r\n  var _calcOldNewLineCount = calcOldNewLineCount(hunk.lines),\r\n      oldLines = _calcOldNewLineCount.oldLines,\r\n      newLines = _calcOldNewLineCount.newLines;\r\n\r\n  if (oldLines !== undefined) {\r\n    hunk.oldLines = oldLines;\r\n  } else {\r\n    delete hunk.oldLines;\r\n  }\r\n\r\n  if (newLines !== undefined) {\r\n    hunk.newLines = newLines;\r\n  } else {\r\n    delete hunk.newLines;\r\n  }\r\n}\r\nfunction merge(mine, theirs, base) {\r\n  mine = loadPatch(mine, base);\r\n  theirs = loadPatch(theirs, base);\r\n  var ret = {}; // For index we just let it pass through as it doesn't have any necessary meaning.\r\n  // Leaving sanity checks on this to the API consumer that may know more about the\r\n  // meaning in their own context.\r\n\r\n  if (mine.index || theirs.index) {\r\n    ret.index = mine.index || theirs.index;\r\n  }\r\n\r\n  if (mine.newFileName || theirs.newFileName) {\r\n    if (!fileNameChanged(mine)) {\r\n      // No header or no change in ours, use theirs (and ours if theirs does not exist)\r\n      ret.oldFileName = theirs.oldFileName || mine.oldFileName;\r\n      ret.newFileName = theirs.newFileName || mine.newFileName;\r\n      ret.oldHeader = theirs.oldHeader || mine.oldHeader;\r\n      ret.newHeader = theirs.newHeader || mine.newHeader;\r\n    } else if (!fileNameChanged(theirs)) {\r\n      // No header or no change in theirs, use ours\r\n      ret.oldFileName = mine.oldFileName;\r\n      ret.newFileName = mine.newFileName;\r\n      ret.oldHeader = mine.oldHeader;\r\n      ret.newHeader = mine.newHeader;\r\n    } else {\r\n      // Both changed... figure it out\r\n      ret.oldFileName = selectField(ret, mine.oldFileName, theirs.oldFileName);\r\n      ret.newFileName = selectField(ret, mine.newFileName, theirs.newFileName);\r\n      ret.oldHeader = selectField(ret, mine.oldHeader, theirs.oldHeader);\r\n      ret.newHeader = selectField(ret, mine.newHeader, theirs.newHeader);\r\n    }\r\n  }\r\n\r\n  ret.hunks = [];\r\n  var mineIndex = 0,\r\n      theirsIndex = 0,\r\n      mineOffset = 0,\r\n      theirsOffset = 0;\r\n\r\n  while (mineIndex < mine.hunks.length || theirsIndex < theirs.hunks.length) {\r\n    var mineCurrent = mine.hunks[mineIndex] || {\r\n      oldStart: Infinity\r\n    },\r\n        theirsCurrent = theirs.hunks[theirsIndex] || {\r\n      oldStart: Infinity\r\n    };\r\n\r\n    if (hunkBefore(mineCurrent, theirsCurrent)) {\r\n      // This patch does not overlap with any of the others, yay.\r\n      ret.hunks.push(cloneHunk(mineCurrent, mineOffset));\r\n      mineIndex++;\r\n      theirsOffset += mineCurrent.newLines - mineCurrent.oldLines;\r\n    } else if (hunkBefore(theirsCurrent, mineCurrent)) {\r\n      // This patch does not overlap with any of the others, yay.\r\n      ret.hunks.push(cloneHunk(theirsCurrent, theirsOffset));\r\n      theirsIndex++;\r\n      mineOffset += theirsCurrent.newLines - theirsCurrent.oldLines;\r\n    } else {\r\n      // Overlap, merge as best we can\r\n      var mergedHunk = {\r\n        oldStart: Math.min(mineCurrent.oldStart, theirsCurrent.oldStart),\r\n        oldLines: 0,\r\n        newStart: Math.min(mineCurrent.newStart + mineOffset, theirsCurrent.oldStart + theirsOffset),\r\n        newLines: 0,\r\n        lines: []\r\n      };\r\n      mergeLines(mergedHunk, mineCurrent.oldStart, mineCurrent.lines, theirsCurrent.oldStart, theirsCurrent.lines);\r\n      theirsIndex++;\r\n      mineIndex++;\r\n      ret.hunks.push(mergedHunk);\r\n    }\r\n  }\r\n\r\n  return ret;\r\n}\r\n\r\nfunction loadPatch(param, base) {\r\n  if (typeof param === 'string') {\r\n    if (/^@@/m.test(param) || /^Index:/m.test(param)) {\r\n      return parsePatch(param)[0];\r\n    }\r\n\r\n    if (!base) {\r\n      throw new Error('Must provide a base reference or pass in a patch');\r\n    }\r\n\r\n    return structuredPatch(undefined, undefined, base, param);\r\n  }\r\n\r\n  return param;\r\n}\r\n\r\nfunction fileNameChanged(patch) {\r\n  return patch.newFileName && patch.newFileName !== patch.oldFileName;\r\n}\r\n\r\nfunction selectField(index, mine, theirs) {\r\n  if (mine === theirs) {\r\n    return mine;\r\n  } else {\r\n    index.conflict = true;\r\n    return {\r\n      mine: mine,\r\n      theirs: theirs\r\n    };\r\n  }\r\n}\r\n\r\nfunction hunkBefore(test, check) {\r\n  return test.oldStart < check.oldStart && test.oldStart + test.oldLines < check.oldStart;\r\n}\r\n\r\nfunction cloneHunk(hunk, offset) {\r\n  return {\r\n    oldStart: hunk.oldStart,\r\n    oldLines: hunk.oldLines,\r\n    newStart: hunk.newStart + offset,\r\n    newLines: hunk.newLines,\r\n    lines: hunk.lines\r\n  };\r\n}\r\n\r\nfunction mergeLines(hunk, mineOffset, mineLines, theirOffset, theirLines) {\r\n  // This will generally result in a conflicted hunk, but there are cases where the context\r\n  // is the only overlap where we can successfully merge the content here.\r\n  var mine = {\r\n    offset: mineOffset,\r\n    lines: mineLines,\r\n    index: 0\r\n  },\r\n      their = {\r\n    offset: theirOffset,\r\n    lines: theirLines,\r\n    index: 0\r\n  }; // Handle any leading content\r\n\r\n  insertLeading(hunk, mine, their);\r\n  insertLeading(hunk, their, mine); // Now in the overlap content. Scan through and select the best changes from each.\r\n\r\n  while (mine.index < mine.lines.length && their.index < their.lines.length) {\r\n    var mineCurrent = mine.lines[mine.index],\r\n        theirCurrent = their.lines[their.index];\r\n\r\n    if ((mineCurrent[0] === '-' || mineCurrent[0] === '+') && (theirCurrent[0] === '-' || theirCurrent[0] === '+')) {\r\n      // Both modified ...\r\n      mutualChange(hunk, mine, their);\r\n    } else if (mineCurrent[0] === '+' && theirCurrent[0] === ' ') {\r\n      var _hunk$lines;\r\n\r\n      // Mine inserted\r\n      (_hunk$lines = hunk.lines).push.apply(_hunk$lines, _toConsumableArray(collectChange(mine)));\r\n    } else if (theirCurrent[0] === '+' && mineCurrent[0] === ' ') {\r\n      var _hunk$lines2;\r\n\r\n      // Theirs inserted\r\n      (_hunk$lines2 = hunk.lines).push.apply(_hunk$lines2, _toConsumableArray(collectChange(their)));\r\n    } else if (mineCurrent[0] === '-' && theirCurrent[0] === ' ') {\r\n      // Mine removed or edited\r\n      removal(hunk, mine, their);\r\n    } else if (theirCurrent[0] === '-' && mineCurrent[0] === ' ') {\r\n      // Their removed or edited\r\n      removal(hunk, their, mine, true);\r\n    } else if (mineCurrent === theirCurrent) {\r\n      // Context identity\r\n      hunk.lines.push(mineCurrent);\r\n      mine.index++;\r\n      their.index++;\r\n    } else {\r\n      // Context mismatch\r\n      conflict(hunk, collectChange(mine), collectChange(their));\r\n    }\r\n  } // Now push anything that may be remaining\r\n\r\n\r\n  insertTrailing(hunk, mine);\r\n  insertTrailing(hunk, their);\r\n  calcLineCount(hunk);\r\n}\r\n\r\nfunction mutualChange(hunk, mine, their) {\r\n  var myChanges = collectChange(mine),\r\n      theirChanges = collectChange(their);\r\n\r\n  if (allRemoves(myChanges) && allRemoves(theirChanges)) {\r\n    // Special case for remove changes that are supersets of one another\r\n    if (arrayStartsWith(myChanges, theirChanges) && skipRemoveSuperset(their, myChanges, myChanges.length - theirChanges.length)) {\r\n      var _hunk$lines3;\r\n\r\n      (_hunk$lines3 = hunk.lines).push.apply(_hunk$lines3, _toConsumableArray(myChanges));\r\n\r\n      return;\r\n    } else if (arrayStartsWith(theirChanges, myChanges) && skipRemoveSuperset(mine, theirChanges, theirChanges.length - myChanges.length)) {\r\n      var _hunk$lines4;\r\n\r\n      (_hunk$lines4 = hunk.lines).push.apply(_hunk$lines4, _toConsumableArray(theirChanges));\r\n\r\n      return;\r\n    }\r\n  } else if (arrayEqual(myChanges, theirChanges)) {\r\n    var _hunk$lines5;\r\n\r\n    (_hunk$lines5 = hunk.lines).push.apply(_hunk$lines5, _toConsumableArray(myChanges));\r\n\r\n    return;\r\n  }\r\n\r\n  conflict(hunk, myChanges, theirChanges);\r\n}\r\n\r\nfunction removal(hunk, mine, their, swap) {\r\n  var myChanges = collectChange(mine),\r\n      theirChanges = collectContext(their, myChanges);\r\n\r\n  if (theirChanges.merged) {\r\n    var _hunk$lines6;\r\n\r\n    (_hunk$lines6 = hunk.lines).push.apply(_hunk$lines6, _toConsumableArray(theirChanges.merged));\r\n  } else {\r\n    conflict(hunk, swap ? theirChanges : myChanges, swap ? myChanges : theirChanges);\r\n  }\r\n}\r\n\r\nfunction conflict(hunk, mine, their) {\r\n  hunk.conflict = true;\r\n  hunk.lines.push({\r\n    conflict: true,\r\n    mine: mine,\r\n    theirs: their\r\n  });\r\n}\r\n\r\nfunction insertLeading(hunk, insert, their) {\r\n  while (insert.offset < their.offset && insert.index < insert.lines.length) {\r\n    var line = insert.lines[insert.index++];\r\n    hunk.lines.push(line);\r\n    insert.offset++;\r\n  }\r\n}\r\n\r\nfunction insertTrailing(hunk, insert) {\r\n  while (insert.index < insert.lines.length) {\r\n    var line = insert.lines[insert.index++];\r\n    hunk.lines.push(line);\r\n  }\r\n}\r\n\r\nfunction collectChange(state) {\r\n  var ret = [],\r\n      operation = state.lines[state.index][0];\r\n\r\n  while (state.index < state.lines.length) {\r\n    var line = state.lines[state.index]; // Group additions that are immediately after subtractions and treat them as one \"atomic\" modify change.\r\n\r\n    if (operation === '-' && line[0] === '+') {\r\n      operation = '+';\r\n    }\r\n\r\n    if (operation === line[0]) {\r\n      ret.push(line);\r\n      state.index++;\r\n    } else {\r\n      break;\r\n    }\r\n  }\r\n\r\n  return ret;\r\n}\r\n\r\nfunction collectContext(state, matchChanges) {\r\n  var changes = [],\r\n      merged = [],\r\n      matchIndex = 0,\r\n      contextChanges = false,\r\n      conflicted = false;\r\n\r\n  while (matchIndex < matchChanges.length && state.index < state.lines.length) {\r\n    var change = state.lines[state.index],\r\n        match = matchChanges[matchIndex]; // Once we've hit our add, then we are done\r\n\r\n    if (match[0] === '+') {\r\n      break;\r\n    }\r\n\r\n    contextChanges = contextChanges || change[0] !== ' ';\r\n    merged.push(match);\r\n    matchIndex++; // Consume any additions in the other block as a conflict to attempt\r\n    // to pull in the remaining context after this\r\n\r\n    if (change[0] === '+') {\r\n      conflicted = true;\r\n\r\n      while (change[0] === '+') {\r\n        changes.push(change);\r\n        change = state.lines[++state.index];\r\n      }\r\n    }\r\n\r\n    if (match.substr(1) === change.substr(1)) {\r\n      changes.push(change);\r\n      state.index++;\r\n    } else {\r\n      conflicted = true;\r\n    }\r\n  }\r\n\r\n  if ((matchChanges[matchIndex] || '')[0] === '+' && contextChanges) {\r\n    conflicted = true;\r\n  }\r\n\r\n  if (conflicted) {\r\n    return changes;\r\n  }\r\n\r\n  while (matchIndex < matchChanges.length) {\r\n    merged.push(matchChanges[matchIndex++]);\r\n  }\r\n\r\n  return {\r\n    merged: merged,\r\n    changes: changes\r\n  };\r\n}\r\n\r\nfunction allRemoves(changes) {\r\n  return changes.reduce(function (prev, change) {\r\n    return prev && change[0] === '-';\r\n  }, true);\r\n}\r\n\r\nfunction skipRemoveSuperset(state, removeChanges, delta) {\r\n  for (var i = 0; i < delta; i++) {\r\n    var changeContent = removeChanges[removeChanges.length - delta + i].substr(1);\r\n\r\n    if (state.lines[state.index + i] !== ' ' + changeContent) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  state.index += delta;\r\n  return true;\r\n}\r\n\r\nfunction calcOldNewLineCount(lines) {\r\n  var oldLines = 0;\r\n  var newLines = 0;\r\n  lines.forEach(function (line) {\r\n    if (typeof line !== 'string') {\r\n      var myCount = calcOldNewLineCount(line.mine);\r\n      var theirCount = calcOldNewLineCount(line.theirs);\r\n\r\n      if (oldLines !== undefined) {\r\n        if (myCount.oldLines === theirCount.oldLines) {\r\n          oldLines += myCount.oldLines;\r\n        } else {\r\n          oldLines = undefined;\r\n        }\r\n      }\r\n\r\n      if (newLines !== undefined) {\r\n        if (myCount.newLines === theirCount.newLines) {\r\n          newLines += myCount.newLines;\r\n        } else {\r\n          newLines = undefined;\r\n        }\r\n      }\r\n    } else {\r\n      if (newLines !== undefined && (line[0] === '+' || line[0] === ' ')) {\r\n        newLines++;\r\n      }\r\n\r\n      if (oldLines !== undefined && (line[0] === '-' || line[0] === ' ')) {\r\n        oldLines++;\r\n      }\r\n    }\r\n  });\r\n  return {\r\n    oldLines: oldLines,\r\n    newLines: newLines\r\n  };\r\n}\r\n\r\nfunction reversePatch(structuredPatch) {\r\n  if (Array.isArray(structuredPatch)) {\r\n    return structuredPatch.map(reversePatch).reverse();\r\n  }\r\n\r\n  return _objectSpread2(_objectSpread2({}, structuredPatch), {}, {\r\n    oldFileName: structuredPatch.newFileName,\r\n    oldHeader: structuredPatch.newHeader,\r\n    newFileName: structuredPatch.oldFileName,\r\n    newHeader: structuredPatch.oldHeader,\r\n    hunks: structuredPatch.hunks.map(function (hunk) {\r\n      return {\r\n        oldLines: hunk.newLines,\r\n        oldStart: hunk.newStart,\r\n        newLines: hunk.oldLines,\r\n        newStart: hunk.oldStart,\r\n        linedelimiters: hunk.linedelimiters,\r\n        lines: hunk.lines.map(function (l) {\r\n          if (l.startsWith('-')) {\r\n            return \"+\".concat(l.slice(1));\r\n          }\r\n\r\n          if (l.startsWith('+')) {\r\n            return \"-\".concat(l.slice(1));\r\n          }\r\n\r\n          return l;\r\n        })\r\n      };\r\n    })\r\n  });\r\n}\r\n\r\n// See: http://code.google.com/p/google-diff-match-patch/wiki/API\r\nfunction convertChangesToDMP(changes) {\r\n  var ret = [],\r\n      change,\r\n      operation;\r\n\r\n  for (var i = 0; i < changes.length; i++) {\r\n    change = changes[i];\r\n\r\n    if (change.added) {\r\n      operation = 1;\r\n    } else if (change.removed) {\r\n      operation = -1;\r\n    } else {\r\n      operation = 0;\r\n    }\r\n\r\n    ret.push([operation, change.value]);\r\n  }\r\n\r\n  return ret;\r\n}\r\n\r\nfunction convertChangesToXML(changes) {\r\n  var ret = [];\r\n\r\n  for (var i = 0; i < changes.length; i++) {\r\n    var change = changes[i];\r\n\r\n    if (change.added) {\r\n      ret.push('<ins>');\r\n    } else if (change.removed) {\r\n      ret.push('<del>');\r\n    }\r\n\r\n    ret.push(escapeHTML(change.value));\r\n\r\n    if (change.added) {\r\n      ret.push('</ins>');\r\n    } else if (change.removed) {\r\n      ret.push('</del>');\r\n    }\r\n  }\r\n\r\n  return ret.join('');\r\n}\r\n\r\nfunction escapeHTML(s) {\r\n  var n = s;\r\n  n = n.replace(/&/g, '&amp;');\r\n  n = n.replace(/</g, '&lt;');\r\n  n = n.replace(/>/g, '&gt;');\r\n  n = n.replace(/\"/g, '&quot;');\r\n  return n;\r\n}\r\n\r\nexport { Diff, applyPatch, applyPatches, canonicalize, convertChangesToDMP, convertChangesToXML, createPatch, createTwoFilesPatch, diffArrays, diffChars, diffCss, diffJson, diffLines, diffSentences, diffTrimmedLines, diffWords, diffWordsWithSpace, formatPatch, merge, parsePatch, reversePatch, structuredPatch };\r\n"],
  "mappings": "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",
  "names": ["diff", "value", "obj", "line", "operation", "hunk", "toPos", "j", "content", "err", "_loop", "i", "structuredPatch"]
}
